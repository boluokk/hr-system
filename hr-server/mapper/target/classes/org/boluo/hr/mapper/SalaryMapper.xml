<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.boluo.hr.mapper.SalaryMapper">
    <sql id="column">
        id, name, basic_salary, bonus, lunch_salary, traffic_salary, all_salary, pension_base, pension_per,
    create_date, medical_base, medical_per, accumulation_fund_base, accumulation_fund_per
    </sql>
    <resultMap id="SalaryConfigViewMap" type="org.boluo.hr.pojo.SalaryConfigView">
        <result property="employeeId" column="employee_id"/>
        <result property="employeeName" column="employee_name"/>
        <result property="workId" column="work_id"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="departmentId" column="department_id"/>
        <result property="departmentName" column="department_name"/>
        <association property="salary" resultMap="org.boluo.hr.mapper.SalaryMapper.BaseResultMap"/>
    </resultMap>
    <resultMap id="BaseResultMap" type="org.boluo.hr.pojo.Salary">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="basic_salary" property="basicSalary" jdbcType="INTEGER"/>
        <result column="bonus" property="bonus" jdbcType="INTEGER"/>
        <result column="lunch_salary" property="lunchSalary" jdbcType="INTEGER"/>
        <result column="traffic_salary" property="trafficSalary" jdbcType="INTEGER"/>
        <result column="all_salary" property="allSalary" jdbcType="INTEGER"/>
        <result column="pension_base" property="pensionBase" jdbcType="INTEGER"/>
        <result column="pension_per" property="pensionPer" jdbcType="REAL"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="medical_base" property="medicalBase" jdbcType="INTEGER"/>
        <result column="medical_per" property="medicalPer" jdbcType="REAL"/>
        <result column="accumulation_fund_base" property="accumulationFundBase" jdbcType="INTEGER"/>
        <result column="accumulation_fund_per" property="accumulationFundPer" jdbcType="REAL"/>
    </resultMap>
    <resultMap id="EmpAndSalary" type="org.boluo.hr.pojo.Employee">
        <id property="id" column="employee_id" jdbcType="INTEGER"/>
        <result property="name" column="employee_name" jdbcType="VARCHAR"/>
        <result property="workId" column="work_id" jdbcType="CHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="phone" column="phone" jdbcType="VARCHAR"/>
        <association property="department" javaType="org.boluo.hr.pojo.Department">
            <id property="id" column="dep_id" jdbcType="INTEGER"/>
            <result property="name" column="dep_name" jdbcType="VARCHAR"/>
        </association>
        <association property="salary" resultMap="org.boluo.hr.mapper.SalaryMapper.BaseResultMap"/>
    </resultMap>

    <select id="selectEmployeeAndSalary" resultMap="SalaryConfigViewMap">
        select
        emp.id as employee_id, emp.name as employee_name, emp.email as email, emp.phone as phone, emp.work_id as work_id,
        dep.id   as department_id,
        dep.name as department_name,
        sa.*
        from employee emp
        LEFT JOIN employee_salary_merge esm on emp.id = esm.employee_id
        LEFT JOIN salary sa on esm.salary_id = sa.id
        LEFT JOIN department dep on emp.department_id = dep.id
    </select>
    <select id="countSalaryWithEmployee" resultType="Integer">
        select count(*)
        from employee emp
                 LEFT JOIN employee_salary_merge esm on emp.id = esm.employee_id
                 LEFT JOIN salary sa on esm.salary_id = sa.id
                 LEFT JOIN department dep on emp.department_id = dep.id
    </select>
    <delete id="deleteMany">
        delete from salary
        where id in
        <foreach collection="ids" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
    </delete>
    <select id="selectAll" resultMap="BaseResultMap">
        select
        <include refid="column"/>
        from salary
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="column"/>
        from salary
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from salary
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insertSalary" parameterType="org.boluo.hr.pojo.Salary">
        insert into salary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">
                `name`,
            </if>
            <if test="basicSalary != null">
                basic_salary,
            </if>
            <if test="bonus != null">
                bonus,
            </if>
            <if test="lunchSalary != null">
                lunch_salary,
            </if>
            <if test="trafficSalary != null">
                traffic_salary,
            </if>
            <if test="pensionBase != null">
                pension_base,
            </if>
            <if test="pensionPer != null">
                pension_per,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="medicalBase != null">
                medical_base,
            </if>
            <if test="medicalPer != null">
                medical_per,
            </if>
            <if test="accumulationFundBase != null">
                accumulation_fund_base,
            </if>
            <if test="accumulationFundPer != null">
                accumulation_fund_per,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="basicSalary != null">
                #{basicSalary,jdbcType=INTEGER},
            </if>
            <if test="bonus != null">
                #{bonus,jdbcType=INTEGER},
            </if>
            <if test="lunchSalary != null">
                #{lunchSalary,jdbcType=INTEGER},
            </if>
            <if test="trafficSalary != null">
                #{trafficSalary,jdbcType=INTEGER},
            </if>
            <if test="pensionBase != null">
                #{pensionBase,jdbcType=INTEGER},
            </if>
            <if test="pensionPer != null">
                #{pensionPer,jdbcType=FLOAT},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="medicalBase != null">
                #{medicalBase,jdbcType=INTEGER},
            </if>
            <if test="medicalPer != null">
                #{medicalPer,jdbcType=FLOAT},
            </if>
            <if test="accumulationFundBase != null">
                #{accumulationFundBase,jdbcType=INTEGER},
            </if>
            <if test="accumulationFundPer != null">
                #{accumulationFundPer,jdbcType=FLOAT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKey" parameterType="org.boluo.hr.pojo.Salary">
        update salary
        <set>
            <if test="basicSalary != null">
                basic_salary = #{basicSalary,jdbcType=INTEGER},
            </if>
            <if test="bonus != null">
                bonus = #{bonus,jdbcType=INTEGER},
            </if>
            <if test="lunchSalary != null">
                lunch_salary = #{lunchSalary,jdbcType=INTEGER},
            </if>
            <if test="trafficSalary != null">
                traffic_salary = #{trafficSalary,jdbcType=INTEGER},
            </if>
            <if test="pensionBase != null">
                pension_base = #{pensionBase,jdbcType=INTEGER},
            </if>
            <if test="pensionPer != null">
                pension_per = #{pensionPer,jdbcType=FLOAT},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="medicalBase != null">
                medical_base = #{medicalBase,jdbcType=INTEGER},
            </if>
            <if test="medicalPer != null">
                medical_per = #{medicalPer,jdbcType=FLOAT},
            </if>
            <if test="accumulationFundBase != null">
                accumulation_fund_base = #{accumulationFundBase,jdbcType=INTEGER},
            </if>
            <if test="accumulationFundPer != null">
                accumulation_fund_per = #{accumulationFundPer,jdbcType=FLOAT},
            </if>
            <if test="name != null">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>